#Detalhe: comentar sempre sem acentos no .properties, para nao dar erro

spring.application.name=dscatalog

#Coloca o perfil ativo da aplicacao como o perfil de teste, ideal enquanto esta desenvolvendo
#Ao definir spring.profiles.active=test, estou dizendo ao Spring Boot para ativar o perfil chamado test.
#Isso significa que o Spring Boot carregara as configuracoes especificas do perfil test,
#que podem estar em arquivos de propriedades separados (como application-test.properties) ou no caso, na classe TestConfig
#e vantajoso pois, posso criar varios perfis e mudar somente aqui para ativar configuracoes diferentes,
#como por exemplo, a classe TestConfig so executa no perfil de teste,
#mas eu poderia ter cada perfil com uma url de banco de dados diferente, por exemplo

spring.profiles.active=${APP_PROFILE:test}

#Ele permite que o Jackson na hora de serializar o Json falar pro JPA que por exemplo,
#ao buscar um cliente, ele tambem vai precisar dos pedidos do usuario, assim,
#ele chama o JPA para buscar os pedidos desse usuario tambem de forma automatica,
#sem precisar de comandos adicionais. (quando = true)
#Basicamente, se for false, ele faz com que a sessão JPA seja encerrada antes de voltar para a camada controller (camada web)
#ou seja, ele encerra a sessao JPA logo que chega na camada de servico, nao na de controller novamente (na volta) (pdf do capitulo que mostra arquitetura)
#A sessao JPA nao fica aberta durante tod o ciclo de vida de uma requisicao web, apenas ate o fim da transacao na camada de servico

spring.jpa.open-in-view=false